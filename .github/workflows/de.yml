name: Deploy Docker to Elastic Beanstalk

on:
  push:
    branches:
      - main

jobs:
  install-dependencies:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python 3.13
        uses: actions/setup-python@v4
        with:
          python-version: 3.13

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

  build-and-push-ecr:
    needs: install-dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}

      - name: Build and Push Docker Image
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}

      - name: Debug Docker Image
        run: |
            echo "Docker Image: $ECR_REGISTRY/$ECR_REPOSITORY:latest"0
            docker images
            docker run --rm $ECR_REGISTRY/$ECR_REPOSITORY:latest echo "Docker image is working"
        env:
            AWS_REGION: ${{ secrets.AWS_REGION }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
            ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
            ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}

      - name: Save ECR Image URL
        id: ecr-image
        run: echo "ECR_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:latest" >> $GITHUB_ENV
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}

  deploy-to-elastic-beanstalk:
    needs: build-and-push-ecr
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create Dockerrun.aws.json
        run: |
          echo '{
            "AWSEBDockerrunVersion": "1",
            "Image": {
              "Name": "'$ECR_REGISTRY/$ECR_REPOSITORY:latest'",
              "Update": "true"
            },
            "Ports": [
              {
                "ContainerPort": "5000"
              }
            ]
          }' > Dockerrun.aws.json
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}

      - name: Debug Dockerrun.aws.json
        run: | 
            cat Dockerrun.aws.json
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Upload Dockerrun.aws.json to S3
        run: |
          aws s3 cp ./Dockerrun.aws.json s3://$S3_BUCKET_NAME/Dockerrun.aws.json --region $AWS_REGION
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}

      - name: Debug Uploaded Dockerrun.aws.json to S3
        run: |
          echo "Verifying Dockerrun.aws.json file in S3 Bucket: $S3_BUCKET_NAME"
          aws s3 ls s3://$S3_BUCKET_NAME/Dockerrun.aws.json --region $AWS_REGION
          echo "Downloading Dockerrun.aws.json from S3 Bucket: $S3_BUCKET_NAME"
          aws s3 cp s3://$S3_BUCKET_NAME/Dockerrun.aws.json ./Dockerrun.aws.json --region $AWS_REGION          
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}

      - name: Check Envi Elastic Beanstalk
        run: |
            aws elasticbeanstalk describe-environments --environment-names ${{ secrets.EB_ENV_NAME }} --query 'Environments[*].PlatformArn' --region $AWS_REGION
        env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
            AWS_REGION: ${{ secrets.AWS_REGION }}
            EB_ENV_NAME: ${{ secrets.EB_ENV_NAME }}

      - name: Retrieve Elastic Beanstalk Logs
        run: |
            aws elasticbeanstalk request-environment-info --environment-name $EB_ENV_NAME --info-type tail --region $AWS_REGION
            aws elasticbeanstalk retrieve-environment-info --environment-name $EB_ENV_NAME --info-type tail --region $AWS_REGION
        env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION: ${{ secrets.AWS_REGION }}
            AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
            EB_ENV_NAME: ${{ secrets.EB_ENV_NAME }}
    #   - name: Deploy to Elastic Beanstalk
    #     run: |
    #         aws elasticbeanstalk create-application-version \
    #             --application-name $EB_APPLICATION_NAME \
    #             --version-label $GITHUB_SHA \
    #             --source-bundle S3Bucket=$S3_BUCKET_NAME,S3Key=Dockerrun.aws.json \
    #             --region $AWS_REGION
  
    #         aws elasticbeanstalk update-environment \
    #             --environment-name $EB_ENV_NAME \
    #             --version-label $GITHUB_SHA \
    #             --region $AWS_REGION
    #     env:
    #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #         AWS_REGION: ${{ secrets.AWS_REGION }}
    #         AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}            
  
    #         EB_ENV_NAME: ${{ secrets.EB_ENV_NAME }}
    #         EB_APP_NAME: ${{ secrets.EB_APPLICATION_NAME }}
    #   - name: Get retrive Elastic Beanstalk Logs
    #     run: |
    #         aws elasticbeanstalk request-environment-info --environment-name $EB_ENV_NAME --info-type tail --region $AWS_REGION            
    #     env:
    #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #         AWS_REGION: ${{ secrets.AWS_REGION }}
    #         AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
    #         EB_ENV_NAME: ${{ secrets.EB_ENV_NAME }}
